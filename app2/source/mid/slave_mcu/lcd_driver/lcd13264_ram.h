//*****************************************************************************//
//*****************************************************************************//
//在使用本文件时，将会占用1K左右的RAM空间
//
//  CKP  2015-04-24
//
//  CKP  2015-05-07  通过增加设置显示起始行，实现整屏上下滚动显示功能
//
//  CKP  2015-07-15  增加显示自定义范围的点阵功能
//*****************************************************************************//
//*****************************************************************************//
#ifndef __lcd13264_ram_h__
#define __lcd13264_ram_h__

#include "define.h"

typedef enum {
    lcd_dis_type_8x16ascii = 0,
    lcd_dis_type_16x16chn, //1
    lcd_dis_type_8x16icon, //2
    lcd_dis_type_8x8icon,  //3
} lcd_dis_type_enum;
/*line = [0,7], pos8x16 = [0, 7], left_or_right = [0, 1]*/
#define lcd_pos_8x8(line, pos8x16, left_or_right) line, (16 * pos8x16 + 8 * left_or_right)
/*line = [0,1], pos8x16 = [0, 7]*/
#define lcd_pos_8x16(line, pos8x16) line, (16 * pos8x16)

//*****************************************************************************
//*****************************************************************************
//-----------                    宏定义设置                   -----------------
//-----------                    条件编译开关                 -----------------
//-----------------------------------------------------------------------------

//最大显示线地址定义
#define lcd_max_y_addr 132 //横向点阵像素
#define lcd_max_x_page 8   //纵向点阵像素

//显示的最大字符数
#define lcd_line_char_max_num 16 //一行显示的最多字符数
#define lcd_page_char_max_num 62 //一页显示的最多字符数，因需要显示上下翻图标，占用两个字符显示空间

//*****************************************************************************
//*****************************************************************************
//-----------           需要外部函数及变量支持                -----------------
//-----------------------------------------------------------------------------

typedef struct
{
    void (*lcd_scl_set)(bit_enum s); //端口状态设置，TRUE高电平，FALSE低电平
    void (*lcd_cs_set)(bit_enum s);  //端口状态设置，TRUE高电平，FALSE低电平
    void (*lcd_rst_set)(bit_enum s); //端口状态设置，TRUE高电平，FALSE低电平
    void (*lcd_a0_set)(bit_enum s);  //端口状态设置，TRUE高电平，FALSE低电平
    void (*lcd_io_set)(bit_enum s);  //端口状态设置，TRUE高电平，FALSE低电平

    void (*lcd_delayms)(uint tim); //毫秒级延时

    void (*lcd_font)(uint addr, uchar *dst);
    //参数addr指待查的字符的地址(编码)
    //参数*dst是指定查找到点阵信息后将结果放到该缓冲器中
} lcd13264_ram_need_struct;

//*****************************************************************************
//*****************************************************************************
//-----------                 供给外部函数调用                -----------------
//-----------------------------------------------------------------------------

extern void lcd13264_data_init(lcd13264_ram_need_struct src);
extern void lcd_init(bit_enum typ, bit_enum ic);
//*******           液晶屏初始化函数            *******//
//参数typ为初始化方式    FALSE为老屏  TRUE为新屏

extern void lcd_set_start_line(uchar s);
//*******            设置显示起始行             *******//
//参数s为行数编号，范围为0-63

extern void lcd_area_dis_set(uchar x_st, uchar x_end, uchar y_st, uchar y_end, uchar dat);
//*******    向特定显示缓冲区写入一个特定的值   *******//
//参数x_st为纵向起始地址，范围为0-7
//参数x_end为纵向终止地址
//参数y_st为横向起始地址，范围为0-131
//参数y_end为横向终止地址
//参数dat         为待写入的数据

extern void lcd_dis_all(void);
//*******                LCD整屏显示            *******//
//系统调用该函数即可

extern void lcd_dis_at_once(void);
//*******         LCD立即显示一屏数据           *******//

//line = [0, 3]//x16
#define lcd_dis_one_page_line(line) (16 * line)
extern void lcd_dis_one_word(uchar x_page, uchar y_addr, const uchar *dis_buff, lcd_dis_type_enum dis_type, bool flg_reverse);
//该函数的功能是显示一个完整的字符，包含16*16,8*16,16*8,8*8四种大小
//
//参数x_page指待显示字符的纵向位置，范围为0-7页，此参数与LCD屏数据手册中的页相对应
//参数y_addr指待显示字符的横向位置，范围为0-131，此参数与LCD屏数据手册中的Y地址相对应
//参数*dis_buff指待显示的缓冲器
//参数dis_type指待显示字符的大小，  0表示8*16ASCII   1表示16*16汉字  2表示16*8图标   3表示8*8图标
//参数flag指待显示字符的点阵显示方式,    FALSE表示正常显示
//                         TRUE表示把点阵信息取反后再显示，这一点主要应用在选中菜单上

extern void lcd_dis_num_val_8x8(uchar x_page, uchar y_addr, bool flg_reverse, u_16 val);

extern void lcd_dis_one_line(uchar x_posi, uchar y_addr, const uchar *dis_buff, bool flg_reverse);
//该函数的功能是显示最多一行字符  高度为两个显示页
//该函数自动清除从设定的显示位置开始到行结束区域中的像素点
//
//参数x_posi指待显示字符的纵向位置，范围为0-3
//参数y_addr指待显示字符的横向位置，范围为0-131，此参数与LCD屏数据手册中的Y地址相对应
//参数*dis_buff指待显示的缓冲器，最后一个字节必须以0x00结尾
//参数flag指待显示字符的点阵显示方式,    FALSE表示正常显示
//                         TRUE表示把点阵信息取反后再显示，这一点主要应用在选中菜单上

extern uint lcd_dis_one_page(unsigned char start, unsigned char len, unsigned char *buf);
//显示一页信息
//
//把一整屏数据当成一个整体， 满屏最多显示(8*4)-1=31个汉字或者62个字符
//满屏最少显示15*3+13=58个字符
//显示位置以字符为单位，位置编号范围为0-61
//
//参数start表示起始位置，范围0-61
//参数lgth表示待显示的数据的长度，可以大于单屏显示的最大范围，函数会有返回值，返回没显示完的字节数
//参数buff表示待显示的缓冲区
//函数返回值为形参中待显示长度参数通过本次调用该函数后，还剩下的待显示的字符的个数

extern void lcd_dis_custom(uchar x_page, uchar y_addr, const uchar *dis_buff, uchar x_cnt, uchar y_cnt);
//*****************************************************************************************
//该函数的功能是显示一个自定义范围的图片
//
//参数x_page指待显示字符的纵向位置，范围为0-7页，此参数与LCD屏数据手册中的页相对应
//参数y_addr指待显示字符的横向位置，范围为0-131，此参数与LCD屏数据手册中的Y地址相对应
//参数*dis_buff指待显示的缓冲器
//参数x_cnt指待显示图片页数大小，单位为页，注意不要超过显示范围
//参数y_cnt指待显示图片横向范围，单位为一个像素，注意不要超过显示范围
//*****************************************************************************************

extern void lcd_write_byte(bit_enum comm_ram, uchar dat);

#endif
//*****************************************************************************
//*****************************************************************************
