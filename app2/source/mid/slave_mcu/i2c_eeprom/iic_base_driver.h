//***********************************************************************//
//***********************************************************************//
//-----------------------------------------------------------------------//
//为了兼容更多的器件，该驱动模块以80KHz的时钟频率通信!!!
//  CKP  2015-04-09
//-----------------------------------------------------------------------//
//***********************************************************************//
//***********************************************************************//
#ifndef  __iic_base_driver_h__
#define  __iic_base_driver_h__




#include "ckp_mcu_file.h"








//*****************************************************************************
//*****************************************************************************
//-----------           需要外部函数及变量支持                -----------------
//-----------------------------------------------------------------------------

typedef struct
{
	void (*dly_us)(uchar t);   //微秒延时

	void (*sda_set)(bit_enum s);  //数据线控制  TRUE为高电平  FALSE为低电平
	void (*scl_set)(bit_enum s);  //时钟线控制  TRUE为高电平  FALSE为低电平

	bit_enum (*sda_read)(void);  //获取数据线状态  TRUE为高电平  FALSE为低电平
	bit_enum (*scl_read)(void);  //获取时钟线状态  TRUE为高电平  FALSE为低电平
}
iic_base_driver_need_struct;










//*****************************************************************************
//*****************************************************************************
//-----------             供给外部调用的变量及函数            -----------------
//-----------------------------------------------------------------------------


//模块内部数据初始化
//要在系统初始化的时候调用，且在开中断之前
extern void iic_base_data_init(iic_base_driver_need_struct s);


//总线初始化
//检测总线状态，如果总线锁死则自动解锁
//函数返回值返回最终的状态  TRUE为初始化成功  FALSE为初始化失败
extern bit_enum iic_bus_init(void);


//从器件读数据操作
//参数sla_addr为从器件地址，忽略最低位的八位地址
//参数addr内部寄存器/存储器起始地址
//参数d_buff待操作的缓冲区
//参数lgth待操作的缓冲区长度
//函数返回值  TRUE为成功  FALSE为失败
extern bit_enum iic_device_read_data(uchar sla_addr, uchar addr, uchar *d_buff, uchar lgth);


//从器件写数据操作
//参数sla_addr为从器件地址，忽略最低位的八位地址
//参数addr内部寄存器/存储器起始地址
//参数s_buff待操作的缓冲区
//参数lgth待操作的缓冲区长度
//函数返回值  TRUE为成功  FALSE为失败
extern bit_enum iic_device_write_data(uchar sla_addr, uchar addr, uchar *s_buff, uchar lgth);








#endif




